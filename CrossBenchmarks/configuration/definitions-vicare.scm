
(define (run-bench name count ok? run)
  (let loop ((i 0) (result (list 'undefined)))
    (if (< i count)
      (loop (+ i 1) (run))
      result)))

;(define-syntax if-fixflo (syntax-rules () ((if-fixflo yes no) no)))

(define (run-benchmark name count ok? run-maker . args)
  (newline)
  (let* ((run    (apply run-maker args))
         (result (time-and-gather
                  (lambda (before after)
                    (let* ((user   (round (/ (- (stats-user-usecs after)
                                                (stats-user-usecs before))
                                             1000)))
                           (gc     (round (/ (- (stats-gc-real-usecs after)
                                                (stats-gc-real-usecs before))
                                             1000))))
                      (fprintf (current-error-port)
                               "RESULT-cpu: ~a.0\nRESULT-gc: ~a.0\nRESULT-total: ~a.0\n"
                               user gc user)))
                  (lambda ()
                    (display "1")
                    (run-bench name count ok? run)))))
    (if (not (ok? result))
      (begin
        (display "*** wrong result ***")
        (newline)
        (display "*** got: ")
        (write result)
        (newline))))
;  (exit 0)
)
(define (fatal-error . args)
  (apply error #f args))

(define (call-with-output-file/truncate filename proc)
  (delete-file filename)
  (call-with-output-file filename proc))
(define (open-output-file/truncate filename)
  (delete-file filename)
  (open-output-file filename))
